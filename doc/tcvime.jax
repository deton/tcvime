*tcvime.jax*   漢字直接入力の補助機能プラグイン

			  tcvime説明書

漢字直接入力の補助機能プラグイン		*tcvime*

1. 概要					|tcvime-overview|
2. 操作法				|tcvime-usage|
3. オプション				|tcvime-option|
4. コマンド				|tcvime-command|
5. 辞書ファイル				|tcvime-file|
6. 設定例				|tcvime-setting|
7. 問題点				|tcvime-problem|

{Vi does not have any of these features}

==============================================================================
1. 概要						*tcvime-overview*

tcode,tutcode等の漢字直接入力keymap用の入力補助機能を提供するプラグインです。
以下の機能を提供します:

|tcvime-mazegaki|		交ぜ書き変換
|tcvime-bushu|			部首合成変換
|tcvime-katakana|		カタカナ変換
|tcvime-seq2kanji|		入力シーケンス→漢字変換
|tcvime-kanji2seq|		漢字→入力シーケンス変換
|tcvime-help|			文字ヘルプ表表示
|tcvime-normal-kanjitable|	漢字表からの漢字挿入

交ぜ書き変換					*tcvime-mazegaki*
------------

|tcvime-insert-mazegaki|	Insert modeでの交ぜ書き変換
|tcvime-insert-mazegaki-katuyo|	Insert modeでの交ぜ書き変換(活用する語)
|tcvime-insert-mazegaki-postfix|	Insert modeでの後置型交ぜ書き変換
|tcvime-normal-mazegaki|	Normal modeでの交ぜ書き変換
|tcvime-normal-mazegaki-katuyo|	Normal modeでの交ぜ書き変換(活用する語)
|tcvime-visual-mazegaki|	Visual modeでの交ぜ書き変換
|tcvime-visual-mazegaki-katuyo|	Visual modeでの交ぜ書き変換(活用する語)

交ぜ書き変換で確定した候補はデフォルトでは学習しません。
学習(候補リスト内の位置を移動)するには、
|'tcvime_movecandto'|オプションを0以上に設定してください。

また、新規単語の登録用に、交ぜ書き変換辞書ファイルを開く
|:TcvimeEditMazegaki|コマンドを用意しています。

候補が無い場合に単語登録(辞書編集)を開始したい場合は、
|'tcvime_mazegaki_edit_nocand'|オプションを1に設定してください。

交ぜ書き変換辞書の形式や編集に関しては、|tcvime-file-mazegaki|参照。

部首合成変換					*tcvime-bushu*
------------

|tcvime-insert-bushu|		Insert modeでの部首合成変換
|tcvime-normal-bushu|		Normal modeでの部首合成変換

ユーザ用部首合成辞書(~/.vim/bushu.help)ファイルがあれば、
優先して部首合成に使用します。

部首合成変換辞書の形式に関しては、|tcvime-file-bushu|参照。

カタカナ変換					*tcvime-katakana*
------------

|'<Plug>TcvimeNKatakana'|  Normal modeでのカタカナ変換
|'<Plug>TcvimeNKataHira'|  Normal modeでのカタカナ変換(ひらがなを指定文字数残す)
|'<Plug>TcvimeVKatakana'|  Visual modeでのカタカナ変換

Insert mode用には、lmap用の後置型カタカナ変換関数を用意しています。
|tcvime-setting|
例:
  " 後置型カタカナ変換: 指定文字数をカタカナ変換。0:ひらがなが続く間
  lmap <silent> k0 <C-R>=tcvime#InputConvertKatakana(0)<CR>
  lmap <silent> k1 <C-R>=tcvime#InputConvertKatakana(1)<CR>
  " 後置型カタカナ変換: 指定文字数のひらがなを残してカタカナ変換
  lmap <silent> j1 <C-R>=tcvime#InputConvertKatakana(-1)<CR>
  " 直前のカタカナ変換を縮める
  lmap <silent> l1 <C-R>=tcvime#InputConvertKatakanaShrink(1)<CR>
  " 後置型でカタカナ文字列を伸ばす
  lmap <silent> h1 <C-R>=tcvime#InputConvertKatakanaExtend(1)<CR>

カタカナモード切り替えは例えばkeymap/tutcodek.vimを参照してください。
'でひらがな/カタカナモード切り替えができるようにしたtutcodeのkeymapです。
ただし、r,f,t等でひらがな使用不可(<C-R>=を使っているため。
loadkeymapでなく、|:map-<expr>|を使ってlmap <expr>で登録する形にすれば
おそらく可能)

入力シーケンス→漢字変換			*tcvime-seq2kanji*
------------------------
keymapが有効になっていない時に入力したシーケンスを漢字に変換する機能です。

|'<Plug>TcvimeVSeq2Kanji'|  Visual modeでの入力シーケンス→漢字変換

Insert mode用には、lmap用の後置型入力シーケンス→漢字変換関数を用意しています。
|tcvime-setting|
例:
  lmap <silent> z0 <C-R>=tcvime#InputConvertSeq2Kanji(0)<CR>

漢字→入力シーケンス変換			*tcvime-kanji2seq*
------------------------
keymap有効のままでアルファベットを入力すると、入力したシーケンスに対応する
漢字になりますが、元のアルファベットに戻したい場合に使うための機能です。

|'<Plug>TcvimeVKanji2Seq'|  Visual modeでの漢字→入力シーケンス変換

keymap有効のままで英単語を入力して、後置型で英字に変換する使い方もあります。
(keymapのオンオフを切り替えるのが面倒な場合向け)

文字数を指定しない場合、英単語入力前にスペースを入力しておくと、
スペース以降の文字を英字に変換して、区切り用に入力したスペースを削除。
  例:" code "と打鍵すると" 演各 "と表示され、開始キーで、"code"に変換。
あるいは、読みの始まりをマークしておくと、それ以降を対象に英字に変換。

Insert mode用には、lmap用の後置型漢字→入力シーケンス変換関数を用意しています。
|tcvime-setting|
例:
  " 後置型漢字→入力シーケンス変換(現位置からスペースまで)
  lmap <silent> ;0 <C-R>=tcvime#InputConvertKanji2Seq(0)<CR>
  " 後置型漢字→入力シーケンス変換(現位置からInsert mode開始位置または行頭まで)
  lmap <silent> ;9 <C-R>=tcvime#InputConvertKanji2SeqAll()<CR>

なお、シーケンスがずれて意味不明な漢字文字列になったものを修復するには、
以下のキーを用意しています。

|'<Plug>TcvimeVShiftSeq'|  Visual modeでの漢字→入力シーケンスシフト→漢字変換

使用例: 「電地給月分動田新同 」→「うかもしれません。」

文字ヘルプ表表示				*tcvime-help*
----------------

|tcvime-normal-help|		文字ヘルプ表表示(Normal mode)
|tcvime-visual-help|		文字ヘルプ表表示(Visual mode)

ユーザ用部首合成辞書(~/.vim/bushu.help)ファイルがあれば、
優先して部首合成ヘルプ表示に使用します。

==============================================================================
2. 操作法					*tcvime-usage*

tcvimeの機能は'mapleader'で指定されたキーの後に'q'などのキーを入力することで
実行されます。tcvimeでは'mapleader'のデフォルトはCTRL-K(CTRLキーを押しながらk)
です。説明中の<Leader>という文字列はmapleaderを表しています。つまり、
mapleaderがCTRL-Kの場合、<Leader>q は CTRL-Kの後にqを入力する、ということです。

なお、Insert modeの場合は、keymapのset後にlmapで機能の割り当てが可能です。
|tcvime-setting|
例:
  " 後置型部首合成変換
  lmap <silent> ala <Plug>TcvimeIBushu
  " 前置型交ぜ書き変換の読み入力開始
  lmap <silent> alj <Plug>TcvimeIStart
  " 前置型交ぜ書き変換
  lmap <silent> al<Space> <Plug>TcvimeIConvOrStart

|tcvime-insert-mazegaki|	Insert modeでの交ぜ書き変換
|tcvime-insert-mazegaki-katuyo|	Insert modeでの交ぜ書き変換(活用する語)
|tcvime-insert-mazegaki-postfix|	Insert modeでの後置型交ぜ書き変換
|tcvime-insert-bushu|		Insert modeでの部首合成変換
|tcvime-normal-mazegaki|	Normal modeでの交ぜ書き変換
|tcvime-normal-mazegaki-katuyo|	Normal modeでの交ぜ書き変換(活用する語)
|tcvime-normal-bushu|		Normal modeでの部首合成変換
|tcvime-visual-mazegaki|	Visual modeでの交ぜ書き変換
|tcvime-visual-mazegaki-katuyo|	Visual modeでの交ぜ書き変換(活用する語)
|tcvime-normal-help|		文字ヘルプ表表示(Normal mode)
|tcvime-visual-help|		文字ヘルプ表表示(Visual mode)
|tcvime-normal-kanjitable|	漢字テーブルファイル表示(Normal mode)


Insert modeでの交ぜ書き変換			*tcvime-insert-mazegaki*
---------------------------
<Leader>q	読みの始まりをマークします。
		確定直後など、何もマークされていない場合は、<Leader><Space>
		でもマークできます。

<Leader><Space>	交ぜ書き変換を行います。
		<Leader>q でマークした位置から現在のカーソル位置の間にある
		文字列を読みとして交ぜ書き変換辞書を検索します。
	        候補が一つしかない場合は読みを置き換えます。
	        候補が複数ある場合は、|complete()|を使って
		補完候補としてポップアップメニーで表示します。
		普通の補完と同様に、CTRL-NやCTRL-Pで候補を選択して、
		CTRL-Yで確定、CTRL-Eでキャンセルできます。

例: "<Leader>qあい<Leader><Space>"と打つと、
    候補がポップアップメニューで表示されます。
    CTRL-Nを打って"哀"を選択してCTRL-Yを打つと、
    "あい"が"哀"に置き換えられます。


Insert modeでの交ぜ書き変換(活用する語)		*tcvime-insert-mazegaki-katuyo*
---------------------------------------
基本的には活用しない語の交ぜ書き変換と同じです。
活用しない部分まで入力してから、<Leader>o で変換します。
候補の確定はCTRL-Yです。

<Leader>o  <Leader>q でマークした位置から現在のカーソル位置の間の文字列に
	   "―"を付加した文字列を読みとして交ぜ書き変換辞書から検索します。

例: "<Leader>qあお<Leader>o"と打つと、ポップアップメニューで"仰"等の候補が
    表示されます。CTRL-Yを打つと、"あお"が"仰"に置き換えられます。

Insert modeでの後置型交ぜ書き変換	*tcvime-insert-mazegaki-postfix*
---------------------------------
読みの文字数を指定して後置型で交ぜ書き変換を開始することもできます。

例えば、tc2と同様に、18,28,38,48と打った際にそれぞれ読みの文字数として、
1,2,3,4文字を指定した交ぜ書き変換を開始したい場合は、
keymapのset後に以下のlmapを行うことで可能です。

  " 活用しない語
  lmap <silent> 18 <C-R>=tcvime#InputPostConvert(1, 0)<CR>
  lmap <silent> 28 <C-R>=tcvime#InputPostConvert(2, 0)<CR>
  lmap <silent> 38 <C-R>=tcvime#InputPostConvert(3, 0)<CR>
  lmap <silent> 48 <C-R>=tcvime#InputPostConvert(4, 0)<CR>
  " 活用する語(ただしtc2と違って、読みの文字数には活用語尾は含まない)
  lmap <silent> 29 <C-R>=tcvime#InputPostConvert(2, 1)<CR>
  lmap <silent> 39 <C-R>=tcvime#InputPostConvert(3, 1)<CR>
  lmap <silent> 49 <C-R>=tcvime#InputPostConvert(4, 1)<CR>
  lmap <silent> 59 <C-R>=tcvime#InputPostConvert(5, 1)<CR>

読みの文字数を指定しないで、後置型交ぜ書き変換を開始することもできます。

設定例(m0を入力した際に後置型交ぜ書き変換を開始する場合):

  lmap <silent> m0 <C-R>=tcvime#InputPostConvertStart(0)<CR>

読みを縮めるには、候補選択ポップアップメニュー表示中に>キーを押すか、
確定後(候補数1個の場合は自動確定されます)に、
<Plug>TcvimeIShrinkにマップしたキーシーケンスを入力してください。

設定例(m>を入力した際に直前の交ぜ書き変換を縮める場合):

  lmap <silent> m> <Plug>TcvimeIShrink

Insert modeでの部首合成変換			*tcvime-insert-bushu*
---------------------------
<Leader>b	カーソル位置の直前の2文字の部首合成変換を行います。

例: "木口<Leader>b"と打つと、"木口"が"杏"に置き換えられます。


Normal modeでの交ぜ書き変換			*tcvime-normal-mazegaki*
---------------------------
[count]<Leader><Space>	カーソル位置以前の[count]文字の交ぜ書き変換を行います。

例: "あい"と表示されているとき、"い"の上にカーソルを置いて
    "2<Leader><Space>"と打つと、__TcvimeCand__というバッファが開いて、
    候補が各行に表示されます。通常の行移動操作で候補を選択後、
    リターンキーやCTRL-Yを打つと、"あい"が選択した候補に置き換えられます。


Normal modeでの交ぜ書き変換(活用する語)		*tcvime-normal-mazegaki-katuyo*
-----------------------------------------
[count]<Leader>o	カーソル位置以前の[count]文字に"―"を付加した文字列を
			読みとして交ぜ書き変換辞書から検索します。

例: "あお"と表示されているとき、"お"の上にカーソルを置いて
    "2<Leader>o"と打つと、__TcvimeCand__というバッファが開いて、
    候補が各行に表示されます。通常の行移動操作で候補を選択後、
    リターンキーやCTRL-Yを打つと、"あお"が選択した候補に置き換えられます。


Normal modeでの部首合成変換			*tcvime-normal-bushu*
---------------------------
<Leader>b	カーソル位置以前の2文字の部首合成変換を行います。

例: "木口"と表示されているとき、"口"の上にカーソルを置いて
    "<Leader>b"と打つと、"木口"が"杏"に置き換えられます。


Visual modeでの交ぜ書き変換			*tcvime-visual-mazegaki*
---------------------------
<Leader><Space>	Visual modeで選択した文字列の交ぜ書き変換を行います。


Visual modeでの交ぜ書き変換(活用する語)		*tcvime-visual-mazegaki-katuyo*
-----------------------------------------
<Leader>o	Visual modeで選択した文字列"―"を付加した文字列を
		読みとして交ぜ書き変換辞書から検索します。


文字ヘルプ表表示(Normal mode)			*tcvime-normal-help*
-----------------------------
<Leader>?	カーソル位置の文字のヘルプ表を表示します。使用中のkeymapで
		直接入力できない文字の場合は、部首合成変換辞書を検索して、
		指定された文字が含まれる行を表示します。

例: "鍵"という文字の上にカーソルを置いて"<Leader>?"と打つと、
    "__TcvimeHelp__"というバッファが開いて次のように表示されます
    (keymapがtutcodeの場合)。
        ・・・・    ・・・・    鍵
        ・・・・  3 ・・・・
        ・・・・    ・・・・
        ・・1 2     ・・・・

文字ヘルプ表表示(Visual mode)			*tcvime-visual-help*
-----------------------------
<Leader>?	Visual modeで選択中の(複数)文字のヘルプ表を表示します。

漢字テーブルファイル表示(Normal mode)		*tcvime-normal-kanjitable*
-------------------------------------
<Leader>t	漢字テーブルファイルを表示します。
		漢字テーブルファイルバッファで、入力したい文字の上にカーソルを
		移動して<CR>キーを押すと、元のバッファにその文字がコピーされま
		す。漢字テーブルファイルバッファは通常の方法(:q等)以外にqキー
		でも閉じます。

漢字テーブルファイルの形式に関しては、|tcvime-file-kanjitable|参照。

==============================================================================
3. オプション					*tcvime-option*

'tcvime_keyboard'				*'tcvime_keyboard'*
  文字ヘルプ表用のキーボード配列を表す文字列。
  キーの後にスペース、を2回ずつ記述します。
  例:
	let tcvime_keyboard = "1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 0 0 \<CR>q q w w e e r r t t y y u u i i o o p p \<CR>a a s s d d f f g g h h j j k k l l ; ; \<CR>z z x x c c v v b b n n m m , , . . / / "

'tcvime_keymap_for_help'			*'tcvime_keymap_for_help'*
  文字ヘルプ表示に使うkeymap。現在のバッファで&keymapが未設定の場合に使用。
  設定例:
	let tcvime_keymap_for_help = 'tutcode'

'tcvime_movecandto'				*'tcvime_movecandto'*
   交ぜ書き変換で確定した候補の、
   候補リスト内の移動先位置(先頭は0。移動させない場合は-1)。
   ただし、確定した候補が、指定位置以前にある場合は移動しない。
   つまり、指定位置より前にある候補の順番は固定。
   省略値: -1
   設定例(tc2と同様に5番目に移動。先頭4個の順番は固定):
     let tcvime_movecandto = 4
   (なお、確定・候補移動のたびに交ぜ書き変換辞書を保存するため(複数Vim
   使用時の排他処理を省くため)、辞書が大きい場合は時間がかかる。)

'tcvime_mazegaki_edit_nocand'			*'tcvime_mazegaki_edit_nocand'*
  交ぜ書き変換で候補が無い場合に辞書編集を開始するかどうか。
  省略値: 0
  設定例:
    let tcvime_mazegaki_edit_nocand = 1
  交ぜ書き変換辞書編集に関しては、|tcvime-file-mazegaki-edit|参照。

TcvimeCustomKeymap()                            *TcvimeCustomKeymap()*
  lmapのカスタマイズ用の関数。tcvime#SetKeymap()からコールバックされる。
  設定例は|tcvime-setting|参照。

'g:tcvime#selectkeys'				*'g:tcvime#selectkeys'*
  交ぜ書き変換候補選択用キーのList。
  候補を選ぶ際に、CTRL-Nを何回か押した後CTRL-Yで確定するかわりに、
  このList内のキーを押すだけで候補を確定できるようになります。
  省略値: []
  設定例:
    let g:tcvime#selectkeys = ['1','2','3','4','5','6','7','8','9','0']
  注: Insert modeでの候補選択の場合、
      このキーで始まるlmapやimapがある場合は、|'timeoutlen'|待ちが発生。

'tcvime_no_default_key_mappings'        *'tcvime_no_default_key_mappings'*
  デフォルトのキーマッピング(<Leader>q等)を登録したくない場合
  (自分で他のキーにmapしたい場合)は1に設定してください。
    let tcvime_no_default_key_mappings = 1

'mapleader'
  キーマッピングのプレフィックス。|mapleader|を参照。省略値: CTRL-K
  CTRL-Kを指定する場合の例:
	let mapleader = "\<C-K>"

'plugin_tcvime_disable'
  このプラグインを読み込みたくない場合に次のように設定します。
	let plugin_tcvime_disable = 1

キー設定オプション(Insert mode)
-------------------------------

'<Plug>TcvimeIStart'				*'<Plug>TcvimeIStart'*
   交ぜ書き変換: 読みの開始位置の印を付けるキー。省略値: <Leader>q
   例(aljを指定する場合):
     lmap <silent> alj <Plug>TcvimeIStart

'<Plug>TcvimeIConvOrStart'			*'<Plug>TcvimeIConvOrStart'*
   交ぜ書き変換: 変換実行キー。
   読みの開始位置の印が付けられていれば、
   開始位置と現在位置の間の文字列を、交ぜ書き変換の読みとして変換を実行。
   印が付けられていなければ、現状位置を読みの開始位置として印を付ける。
   省略値: <Leader><Space>
   例(al<Space>を指定する場合):
     lmap <silent> al<Space> <Plug>TcvimeIConvOrStart

'<Plug>TcvimeIConvOrSpace'			*'<Plug>TcvimeIConvOrSpace'*
   交ぜ書き変換: 変換実行キー。
   読みの開始位置の印が付けられていれば、
   開始位置と現在位置の間の文字列を、交ぜ書き変換の読みとして変換を実行。
   印が付けられていなければ、' 'を挿入。
   省略値: (無し: 未割当て)
   例(<Space>を指定する場合):
     imap <silent> <Space> <Plug>TcvimeIConvOrSpace
   Note: lmapにすると、lmap有効時にfやtやrの後の<Space>が使用不可(<C-R>=なので)

'<Plug>TcvimeIKatuyo'				*'<Plug>TcvimeIKatuyo'*
   交ぜ書き変換: 活用する語の変換実行キー。省略値: <Leader>o
   例(aliを指定する場合):
     lmap <silent> ali <Plug>TcvimeIKatuyo

'<Plug>TcvimeIShrink'				*'<Plug>TcvimeIShrink'*
   交ぜ書き変換: 直前の後置型交ぜ書き変換を縮めるキー。省略値: (無し: 未割当て)
   例(m>を指定する場合):
     lmap <silent> m> <Plug>TcvimeIShrink

'<Plug>TcvimeIBushu'				*'<Plug>TcvimeIBushu'*
   部首合成変換: 直前の2文字の部首合成変換実行キー。省略値: <Leader>b
   例(alaを指定する場合):
     lmap <silent> ala <Plug>TcvimeIBushu

キー設定オプション(Normal mode)
-------------------------------

'<Plug>TcvimeNConvert'				*'<Plug>TcvimeNConvert'*
   交ぜ書き変換: カーソル位置以前の[count]文字の変換を行うキー。
   省略値: <Leader><Space>
   <Leader><Space>を指定する場合の例:
     nmap <silent> <Leader><Space> <Plug>TcvimeNConvert

'<Plug>TcvimeNOpConvert'			*'<Plug>TcvimeNOpConvert'*
   交ぜ書き変換: このキーを押した後の{motion}で指定される文字列を変換。
   注意: キーを押した際に|'operatorfunc'|を上書きします。
   省略値: (無し: 未割当て)
   <Leader>nを指定する場合の例:
     nmap <silent> <Leader>n <Plug>TcvimeNOpConvert

'<Plug>TcvimeNKatuyo'				*'<Plug>TcvimeNKatuyo'*
   交ぜ書き変換: [count]文字の活用する語の変換を行うキー。
   省略値: <Leader>o

'<Plug>TcvimeNOpKatuyo'				*'<Plug>TcvimeNOpKatuyo'*
   交ぜ書き変換: このキーを押した後の{motion}で指定される文字列を
   活用する語として変換。
   注意: キーを押した際に|'operatorfunc'|を上書きします。
   省略値: (無し: 未割当て)

'<Plug>TcvimeNBushu'				*'<Plug>TcvimeNBushu'*
   部首合成変換: カーソル位置以前の2文字の部首合成変換を行うキー。
   省略値: <Leader>b

'<Plug>TcvimeNKatakana'				*'<Plug>TcvimeNKatakana'*
   カタカナ変換: カーソル位置以前の[count]文字のカタカナへの変換を行うキー。
   省略値: (無し: 未割当て)

'<Plug>TcvimeNKataHira'				*'<Plug>TcvimeNKataHira'*
   カタカナ変換: カーソル位置以前でひらがなや「ー」が続く間カタカナに変換。
   [count]で指定した文字数はひらがなとして残す。
   省略値: (無し: 未割当て)

'<Plug>TcvimeNOpKatakana'			*'<Plug>TcvimeNOpKatakana'*
   カタカナ変換: このキーを押した後の{motion}で指定される文字列をカタカナ変換。
   注意: キーを押した際に|'operatorfunc'|を上書きします。
   省略値: (無し: 未割当て)

'<Plug>TcvimeNHelp'				*'<Plug>TcvimeNHelp'*
   打鍵ヘルプ表示: カーソル位置の文字のヘルプ表を表示するキー。
   省略値: <Leader>?

'<Plug>TcvimeNKanjiTable'			*'<Plug>TcvimeNKanjiTable'*
   漢字テーブルファイル表示を行うキー。省略値: <Leader>t

キー設定オプション(Visual mode)
-------------------------------

'<Plug>TcvimeVHelp'				*'<Plug>TcvimeVHelp'*
   打鍵ヘルプ表示: 選択中の(複数)文字のヘルプ表を表示するキー。
   省略値: <Leader>?
   <Leader>? を指定する場合の例:
     vmap <silent> <Leader>? <Plug>TcvimeVHelp

'<Plug>TcvimeVConvert'				*'<Plug>TcvimeVConvert'*
   交ぜ書き変換: 選択中の文字列の変換を行うキー。
   省略値: <Leader><Space>

'<Plug>TcvimeVKatuyo'				*'<Plug>TcvimeVKatuyo'*
   交ぜ書き変換: 選択中の文字列を活用する語として変換を行うキー。
   省略値: <Leader>o

'<Plug>TcvimeVKatakana'				*'<Plug>TcvimeVKatakana'*
   カタカナ変換: 選択中の文字列をカタカナに変換するキー。
   省略値: (無し: 未割当て)

'<Plug>TcvimeVKanji2Seq'			*'<Plug>TcvimeVKanji2Seq'*
   漢字→シーケンス変換: 選択中の文字列を入力シーケンスに変換するキー。
   省略値: (無し: 未割当て)

'<Plug>TcvimeVSeq2Kanji'			*'<Plug>TcvimeVSeq2Kanji'*
   シーケンス→漢字変換: 選択中の文字列を入力シーケンスとみなして漢字に
   変換するキー。
   省略値: (無し: 未割当て)

'<Plug>TcvimeVShiftSeq'				*'<Plug>TcvimeVShiftSeq'*
   漢字→シーケンス→漢字変換: 選択中の文字列の入力シーケンスをずらして
   漢字に変換するキー。
   省略値: (無し: 未割当て)

==============================================================================
4. コマンド					*tcvime-command*

:TcvimeHelp {str}				*:TcvimeHelp*
  指定した文字列内の各文字のヘルプ表を表示する

:TcvimeHelpB[ushu] {str}				*:TcvimeHelpBushu*
  指定した文字列内の各文字を含む行を部首合成変換辞書から検索して表示する

:TcvimeSetKeymap {keymap}			*:TcvimeSetKeymap*
  &keymapに{keymap}をsetする

:TcvimeK[anjiTable]				*:TcvimeKanjiTable*
  漢字テーブルファイルを表示して、漢字を選んで入力

:TcvimeC[loseHelp]				*:TcvimeCloseHelp*
  ヘルプ用バッファを閉じる

:TcvimeE[ditMazegaki]				*:TcvimeEditMazegaki*
  交ぜ書き変換辞書への単語登録用コマンド。
  交ぜ書き変換辞書を編集用に開いて直前に変換した読みを検索する。
  読みが見つからない場合は、新たな行を追加して、
  読みと候補文字列(読みと同じ)を挿入する。

  交ぜ書き変換辞書編集に関しては、|tcvime-file-mazegaki-edit|参照。

==============================================================================
5. 辞書ファイル					*tcvime-file*

|tcvime-file-mazegaki|		交ぜ書き変換辞書
|tcvime-file-mazegaki-edit|	交ぜ書き変換辞書の編集
|tcvime-file-bushu|		部首合成変換辞書
|tcvime-file-kanjitable|	漢字テーブルファイル

交ぜ書き変換辞書				*tcvime-file-mazegaki*
----------------

交ぜ書き変換辞書はtc2と同じ形式です(SKKと同様の形式)。
交ぜ書き変換辞書の各行は以下の形式です。

  読み /候補1/候補2/.../候補N/

読みに漢字や英数字が含まれていてもかまいません。
活用する語は、活用しない部分(語幹)の後に"―"が付いた読みで登録されています。
読みでソートされている必要はありません。

  あき /亜希/亜紀/明/秋/穐/龝/安岐/安芸/安藝/
  あき― /厭き/飽き/
  あ希 /亜希/
  あ紀 /亜紀/
  亜き /亜希/亜紀/
  ...

交ぜ書き変換辞書の編集				*tcvime-file-mazegaki-edit*
----------------------

|:TcvimeEditMazegaki|を実行すると、交ぜ書き変換辞書を編集用に開いて、
直前の交ぜ書き変換の読みを検索します。

読みが見つからない場合は、新たな行を追加して、
読みと候補文字列(読みと同じ)を挿入します。
|'tcvime_mazegaki_edit_nocand'|オプションを1に設定しておくと、
候補が無い場合に辞書編集が開始されます。

例えば、「こつ然」を変換しようとして、候補が無い場合、以下の行が挿入されます。

  こつ然 /こつ然/

このとき(辞書編集開始直後)、読みを間違っていたなどの理由で、
辞書編集をキャンセルしたい場合、Normal modeで<C-E>キーを押してください。

以下のように編集した後、元のバッファ上の読みを、
新たに登録した候補で置換するには、登録した候補上で<C-Y>キーを押してください。

  こつ然 /忽然/

部首合成変換辞書				*tcvime-file-bushu*
----------------

bushu.rev   部首合成変換用辞書
bushu.help  ユーザ用部首合成辞書

ユーザ用部首合成辞書(bushu.help)ファイルがあれば、
優先して部首合成に使用します。

bushu.helpの例:
"風"と"皇"や、"王"と"風"で"凰"を合成したい場合、以下の行を追加してください。
逆の順番("風"と"王")でも合成したい場合は、後ろに"*"を付けてください。

凰風皇 王風*

漢字テーブルファイル				*tcvime-file-kanjitable*
--------------------

単なるテキストファイルなので、形式は自由です。

==============================================================================
6. 設定例					*tcvime-setting*

~/.vimrcでの設定例です。
<C-J>でtutcodeを有効にし、<C-L>でtutcodeを無効にする設定の例です。
(<C-^>でのトグル操作における、現在の状態を意識する負担を無くしたい場合用)

if has('keymap')
  let tcvime_keymap_for_help = 'tutcodep'
  set iminsert=0 imsearch=0
  imap <unique> <C-J> <C-R>=<SID>EnableKeymap()<CR>
  imap <silent> <unique> <C-L> <C-R>=<SID>DisableKeymap()<CR>
  imap <silent> <unique> <ESC> <ESC>:set imsearch=0<CR>
  nmap <silent> <unique> <C-K>k <Plug>TcvimeNKatakana
  nmap <silent> <unique> <C-K><Space> <Plug>TcvimeNConvert
  vmap <silent> <unique> <C-K>k <Plug>TcvimeVKatakana
  vmap <silent> <unique> <C-K>; <Plug>TcvimeVKanji2Seq
  vmap <silent> <unique> <C-K>z <Plug>TcvimeVSeq2Kanji
  vmap <silent> <unique> <C-K>, <Plug>TcvimeVShiftSeq
endif

function! s:EnableKeymap()
  " 既にオンの場合は何もしない
  if &iminsert
    return ''
  endif
  call tcvime#SetKeymap(g:tcvime_keymap_for_help)
  " <Space>で前置型交ぜ書き変換を開始するか、読みが無ければ' 'を挿入。
  " (lmapにすると、lmap有効時にfやtやrの後の<Space>が使用不可。(<C-R>=なので))
  imap <silent> <Space> <C-G>u<Plug>TcvimeIConvOrSpace
  return "\<C-^>"
endfunction

function! s:DisableKeymap()
  " 既にオフの場合は何もしない
  if !&iminsert
    return ''
  endif
  set iminsert=0
  silent! iunmap <Space>
  TcvimeCloseHelp
  return "\<C-^>"
endfunction

" lmapのカスタマイズを行う関数。
" tcvime#SetKeymap()からコールバックされる。
function! TcvimeCustomKeymap()
  " (TUT-Code用の例)
  " 後置型部首合成変換
  lmap <silent> ala <C-G>u<Plug>TcvimeIBushu
  " 前置型交ぜ書き変換の読み入力開始
  lmap <silent> alj <Plug>TcvimeIStart
  " 前置型交ぜ書き変換
  lmap <silent> al<Space> <C-G>u<Plug>TcvimeIConvOrStart
  " 前置型交ぜ書き変換(活用する語として変換)
  lmap <silent> ali <C-G>u<Plug>TcvimeIKatuyo
  " 直前のカタカナ変換・交ぜ書き変換・部首合成変換の取り消し
  lmap <silent> alu <C-G>u<C-R>=tcvime#InputConvertUndo()<CR>
  " 直前の交ぜ書き変換を縮める
  lmap <silent> m> <C-G>u<Plug>TcvimeIShrink
  " 後置型カタカナ変換: 指定文字数をカタカナ変換。0:ひらがなが続く間
  lmap <silent> k0 <C-G>u<C-R>=tcvime#InputConvertKatakana(0)<CR>
  lmap <silent> k1 <C-G>u<C-R>=tcvime#InputConvertKatakana(1)<CR>
  lmap <silent> k2 <C-G>u<C-R>=tcvime#InputConvertKatakana(2)<CR>
  lmap <silent> k3 <C-G>u<C-R>=tcvime#InputConvertKatakana(3)<CR>
  lmap <silent> k4 <C-G>u<C-R>=tcvime#InputConvertKatakana(4)<CR>
  lmap <silent> k5 <C-G>u<C-R>=tcvime#InputConvertKatakana(5)<CR>
  lmap <silent> k6 <C-G>u<C-R>=tcvime#InputConvertKatakana(6)<CR>
  lmap <silent> k7 <C-G>u<C-R>=tcvime#InputConvertKatakana(7)<CR>
  lmap <silent> k8 <C-G>u<C-R>=tcvime#InputConvertKatakana(8)<CR>
  lmap <silent> k9 <C-G>u<C-R>=tcvime#InputConvertKatakana(9)<CR>
  " 後置型カタカナ変換: 指定文字数のひらがなを残してカタカナ変換
  lmap <silent> j1 <C-G>u<C-R>=tcvime#InputConvertKatakana(-1)<CR>
  lmap <silent> j2 <C-G>u<C-R>=tcvime#InputConvertKatakana(-2)<CR>
  lmap <silent> j3 <C-G>u<C-R>=tcvime#InputConvertKatakana(-3)<CR>
  lmap <silent> j4 <C-G>u<C-R>=tcvime#InputConvertKatakana(-4)<CR>
  lmap <silent> j5 <C-G>u<C-R>=tcvime#InputConvertKatakana(-5)<CR>
  lmap <silent> j6 <C-G>u<C-R>=tcvime#InputConvertKatakana(-6)<CR>
  " 直前のカタカナ変換を縮める
  lmap <silent> l1 <C-G>u<C-R>=tcvime#InputConvertKatakanaShrink(1)<CR>
  lmap <silent> l2 <C-G>u<C-R>=tcvime#InputConvertKatakanaShrink(2)<CR>
  lmap <silent> l3 <C-G>u<C-R>=tcvime#InputConvertKatakanaShrink(3)<CR>
  lmap <silent> l4 <C-G>u<C-R>=tcvime#InputConvertKatakanaShrink(4)<CR>
  lmap <silent> l5 <C-G>u<C-R>=tcvime#InputConvertKatakanaShrink(5)<CR>
  " 後置型でカタカナ文字列を伸ばす: カタカナより前でひらがなが続く間
  lmap <silent> h0 <C-G>u<C-R>=tcvime#InputConvertKatakanaExtend(0)<CR>
  " 後置型でカタカナ文字列を伸ばす: 文字数指定
  lmap <silent> h1 <C-G>u<C-R>=tcvime#InputConvertKatakanaExtend(1)<CR>
  lmap <silent> h2 <C-G>u<C-R>=tcvime#InputConvertKatakanaExtend(2)<CR>
  lmap <silent> h3 <C-G>u<C-R>=tcvime#InputConvertKatakanaExtend(3)<CR>
  lmap <silent> h4 <C-G>u<C-R>=tcvime#InputConvertKatakanaExtend(4)<CR>
  lmap <silent> h5 <C-G>u<C-R>=tcvime#InputConvertKatakanaExtend(5)<CR>
  " 後置型交ぜ書き変換: 読みの文字数指定無し: 活用しない語
  lmap <silent> m0 <C-G>u<C-R>=tcvime#InputPostConvertStart(0)<CR>
  " 後置型交ぜ書き変換: 読みの文字数指定有り: 活用しない語
  lmap <silent> m1 <C-G>u<C-R>=tcvime#InputPostConvert(1, 0)<CR>
  lmap <silent> m2 <C-G>u<C-R>=tcvime#InputPostConvert(2, 0)<CR>
  lmap <silent> m3 <C-G>u<C-R>=tcvime#InputPostConvert(3, 0)<CR>
  lmap <silent> m4 <C-G>u<C-R>=tcvime#InputPostConvert(4, 0)<CR>
  lmap <silent> m5 <C-G>u<C-R>=tcvime#InputPostConvert(5, 0)<CR>
  lmap <silent> m6 <C-G>u<C-R>=tcvime#InputPostConvert(6, 0)<CR>
  " 後置型交ぜ書き変換: 読みの文字数指定無し: 活用する語
  lmap <silent> n0 <C-G>u<C-R>=tcvime#InputPostConvertStart(1)<CR>
  " 後置型交ぜ書き変換: 読みの文字数指定有り: 活用する語
  lmap <silent> n1 <C-G>u<C-R>=tcvime#InputPostConvert(1, 1)<CR>
  lmap <silent> n2 <C-G>u<C-R>=tcvime#InputPostConvert(2, 1)<CR>
  lmap <silent> n3 <C-G>u<C-R>=tcvime#InputPostConvert(3, 1)<CR>
  lmap <silent> n4 <C-G>u<C-R>=tcvime#InputPostConvert(4, 1)<CR>
  lmap <silent> n5 <C-G>u<C-R>=tcvime#InputPostConvert(5, 1)<CR>
  lmap <silent> n6 <C-G>u<C-R>=tcvime#InputPostConvert(6, 1)<CR>
  " 後置型入力シーケンス→漢字変換
  lmap <silent> z0 <C-G>u<C-R>=tcvime#InputConvertSeq2Kanji(0)<CR>
  " 後置型漢字→入力シーケンス変換(現位置からスペースまで)
  lmap <silent> ;0 <C-G>u<C-R>=tcvime#InputConvertKanji2Seq(0)<CR>
  " 後置型漢字→入力シーケンス変換(現位置からInsert mode開始位置または行頭まで)
  lmap <silent> ;9 <C-G>u<C-R>=tcvime#InputConvertKanji2SeqAll()<CR><C-R>=<SID>DisableKeymap()<CR>
  " 後置型漢字→入力シーケンス変換(指定文字数)
  lmap <silent> ;1 <C-G>u<C-R>=tcvime#InputConvertKanji2Seq(1)<CR>
  lmap <silent> ;2 <C-G>u<C-R>=tcvime#InputConvertKanji2Seq(2)<CR>
  lmap <silent> ;3 <C-G>u<C-R>=tcvime#InputConvertKanji2Seq(3)<CR>
  lmap <silent> ;4 <C-G>u<C-R>=tcvime#InputConvertKanji2Seq(4)<CR>
  lmap <silent> ;5 <C-G>u<C-R>=tcvime#InputConvertKanji2Seq(5)<CR>
  lmap <silent> ;6 <C-G>u<C-R>=tcvime#InputConvertKanji2Seq(6)<CR>
  " tc2同様の後置型交ぜ書き変換を行うための設定:
  " " 活用しない語
  " lmap <silent> 18 <C-G>u<C-R>=tcvime#InputPostConvert(1, 0)<CR>
  " lmap <silent> 28 <C-G>u<C-R>=tcvime#InputPostConvert(2, 0)<CR>
  " lmap <silent> 38 <C-G>u<C-R>=tcvime#InputPostConvert(3, 0)<CR>
  " lmap <silent> 48 <C-G>u<C-R>=tcvime#InputPostConvert(4, 0)<CR>
  " " 活用する語(ただしtc2と違って、読みの文字数には活用語尾は含まない)
  " lmap <silent> 29 <C-G>u<C-R>=tcvime#InputPostConvert(2, 1)<CR>
  " lmap <silent> 39 <C-G>u<C-R>=tcvime#InputPostConvert(3, 1)<CR>
  " lmap <silent> 49 <C-G>u<C-R>=tcvime#InputPostConvert(4, 1)<CR>
  " lmap <silent> 59 <C-G>u<C-R>=tcvime#InputPostConvert(5, 1)<CR>
endfunction

==============================================================================
7. 問題点					*tcvime-problem*

- Insert modeの交ぜ書き変換の際、ポップアップメニューが無効で表示できない場合、
  自動ヘルプの表示はできません。

- |'backspace'|オプションにstartが入っていない場合、Insertモードで部首合成
  変換等を行ったときに、元の文字が消えないで残ってしまうことがあります。
  <BS>で元の文字を消しているためです。

==============================================================================
 vim:set ft=help:
