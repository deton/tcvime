*tcvime.txt*   mazegaki/bushu conversion for tcode/tutcode keymaps.

			  tcvime説明書

漢字直接入力の補助機能プラグイン		*tcvime*

1. 概要					|tcvime-overview|
2. 操作法				|tcvime-usage|
3. オプション				|tcvime-option|
4. コマンド				|tcvime-command|
5. 設定例				|tcvime-setting|
6. 問題点				|tcvime-problem|

{Vi does not have any of these features}

==============================================================================
1. 概要						*tcvime-overview*

tcode,tutcode等の漢字直接入力keymap用の入力補助機能を提供するプラグインです。
次の3つの機能を提供します: 交ぜ書き変換、部首合成変換、文字ヘルプ表表示。

==============================================================================
2. 操作法					*tcvime-usage*

tcvimeの機能は'mapleader'で指定されたキーの後に'q'などのキーを入力することで
実行されます。tcvimeでは'mapleader'のデフォルトはCTRL-K(CTRLキーを押しながらk)
です。説明中の<Leader>という文字列はmapleaderを表しています。つまり、
mapleaderがCTRL-Kの場合、<Leader>q は CTRL-Kの後にqを入力する、ということです。

|tcvime-insert-mazegaki|	Insert Modeでの交ぜ書き変換
|tcvime-insert-mazegaki-katuyo|	Insert Modeでの交ぜ書き変換(活用する語)
|tcvime-insert-mazegaki-postfix|	Insert Modeでの後置型交ぜ書き変換
|tcvime-insert-bushu|		Insert Modeでの部首合成変換
|tcvime-normal-mazegaki|	Normal Modeでの交ぜ書き変換
|tcvime-normal-mazegaki-katuyo|	Normal Modeでの交ぜ書き変換(活用する語)
|tcvime-normal-bushu|		Normal Modeでの部首合成変換
|tcvime-visual-mazegaki|	Visual Modeでの交ぜ書き変換
|tcvime-visual-mazegaki-katuyo|	Visual Modeでの交ぜ書き変換(活用する語)
|tcvime-normal-help|		文字ヘルプ表表示(Normal Mode)
|tcvime-visual-help|		文字ヘルプ表表示(Visual Mode)
|tcvime-normal-kanjitable|	漢字テーブルファイル表示(Normal Mode)


Insert Modeでの交ぜ書き変換			*tcvime-insert-mazegaki*
---------------------------
<Leader>q	読みの始まりをマークします。
		確定直後など、何もマークされていない場合は、<Leader><Space>
		でもマークできます。

<Leader><Space>	交ぜ書き変換を行います。
		<Leader>q でマークした位置から現在のカーソル位置の間にある
		文字列を読みとして交ぜ書き変換辞書を検索します。
	        候補が一つしかない場合は読みを置き換えます。
	        候補が複数ある場合は、|complete()|を使って
		補完候補としてポップアップメニーで表示します。
		普通の補完と同様に、CTRL-NやCTRL-Pで候補を選択して、
		CTRL-Yで確定、CTRL-Eでキャンセルできます。

例: "<Leader>qあい<Leader><Space>"と打つと、
    候補がポップアップメニューで表示されます。
    CTRL-Nを打って"哀"を選択してCTRL-Yを打つと、
    "あい"が"哀"に置き換えられます。


Insert Modeでの交ぜ書き変換(活用する語)		*tcvime-insert-mazegaki-katuyo*
---------------------------------------
基本的には活用しない語の交ぜ書き変換と同じです。
活用しない部分まで入力してから、<Leader>o で変換します。
候補の確定はCTRL-Yです。

<Leader>o  <Leader>q でマークした位置から現在のカーソル位置の間の文字列に
	   "―"を付加した文字列を読みとして交ぜ書き変換辞書から検索します。

例: "<Leader>qあお<Leader>o"と打つと、ポップアップメニューで"仰"等の候補が
    表示されます。CTRL-Yを打つと、"あお"が"仰"に置き換えられます。

Insert Modeでの後置型交ぜ書き変換	*tcvime-insert-mazegaki-postfix*
---------------------------------
読みの文字数を指定して後置型で交ぜ書き変換を開始することもできます。

例えば、tc2と同様に、18,28,38,48と打った際にそれぞれ読みの文字数として、
1,2,3,4文字を指定した交ぜ書き変換を開始したい場合は、
keymapのset後に以下のlmapを行うことで可能です。

  " 活用しない語
  lmap <silent> 18 <C-R>=tcvime#InputPostConvert(1, 0)<CR>
  lmap <silent> 28 <C-R>=tcvime#InputPostConvert(2, 0)<CR>
  lmap <silent> 38 <C-R>=tcvime#InputPostConvert(3, 0)<CR>
  lmap <silent> 48 <C-R>=tcvime#InputPostConvert(4, 0)<CR>
  " 活用する語(ただしtc2と違って、読みの文字数には活用語尾は含まない)
  lmap <silent> 29 <C-R>=tcvime#InputPostConvert(2, 1)<CR>
  lmap <silent> 39 <C-R>=tcvime#InputPostConvert(3, 1)<CR>
  lmap <silent> 49 <C-R>=tcvime#InputPostConvert(4, 1)<CR>
  lmap <silent> 59 <C-R>=tcvime#InputPostConvert(5, 1)<CR>

Insert Modeでの部首合成変換			*tcvime-insert-bushu*
---------------------------
<Leader>b	カーソル位置の直前の2文字の部首合成変換を行います。

例: "木口<Leader>b"と打つと、"木口"が"杏"に置き換えられます。


Normal Modeでの交ぜ書き変換			*tcvime-normal-mazegaki*
---------------------------
[count]<Leader><Space>	カーソル位置以前の[count]文字の交ぜ書き変換を行います。

例: "あい"と表示されているとき、"い"の上にカーソルを置いて
    "2<Leader><Space>"と打つと、交ぜ書き変換用辞書ファイルの
    "~/.vim/mazegaki.dic"というバッファが開いて、
    読みを検索して"^あい "が見つかった行にカーソルが表示されます。
      あい /娃/哀/愛/挨/姶/相/藍/曖/隘/
    CTRL-Nで次候補、CTRL-Pで前候補に移動して、候補を選択後、
    CTRL-Yを打つと、"あい"が選択した候補に置き換えられます。
    '/'の上にカーソルがある場合、直前の候補が確定されます。


Normal Modeでの交ぜ書き変換(活用する語)		*tcvime-normal-mazegaki-katuyo*
-----------------------------------------
[count]<Leader>o	カーソル位置以前の[count]文字に"―"を付加した文字列を
			読みとして交ぜ書き変換辞書から検索します。

例: "あお"と表示されているとき、"お"の上にカーソルを置いて
    "2<Leader>o"と打つと、交ぜ書き変換用辞書ファイルの
    "~/.vim/mazegaki.dic"というバッファが開いて、
    読みを検索して"^あお― "が見つかった行にカーソルが表示されます。
      あお― /仰/青/扇/煽/蒼/
    CTRL-Nで次候補、CTRL-Pで前候補に移動して、候補を選択後、
    CTRL-Yを打つと、"あお"が選択した候補に置き換えられます。
    '/'の上にカーソルがある場合、直前の候補が確定されます。


Normal Modeでの部首合成変換			*tcvime-normal-bushu*
---------------------------
<Leader>b	カーソル位置以前の2文字の部首合成変換を行います。

例: "木口"と表示されているとき、"口"の上にカーソルを置いて
    "<Leader>b"と打つと、"木口"が"杏"に置き換えられます。


Visual Modeでの交ぜ書き変換			*tcvime-visual-mazegaki*
---------------------------
<Leader><Space>	Visual Modeで選択した文字列の交ぜ書き変換を行います。


Visual Modeでの交ぜ書き変換(活用する語)		*tcvime-visual-mazegaki-katuyo*
-----------------------------------------
<Leader>o	Visual Modeで選択した文字列"―"を付加した文字列を
		読みとして交ぜ書き変換辞書から検索します。


文字ヘルプ表表示(Normal Mode)			*tcvime-normal-help*
-----------------------------
<Leader>?	カーソル位置の文字のヘルプ表を表示します。使用中のkeymapで
		直接入力できない文字の場合は、部首合成変換辞書を検索して、
		指定された文字が含まれる行を表示します。

例: "鍵"という文字の上にカーソルを置いて"<Leader>?"と打つと、
    "__TcvimeHelp__"というバッファが開いて次のように表示されます
    (keymapがtutcodeの場合)。
        ・・・・    ・・・・    鍵
        ・・・・  3 ・・・・
        ・・・・    ・・・・
        ・・1 2     ・・・・

文字ヘルプ表表示(Visual Mode)			*tcvime-visual-help*
-----------------------------
<Leader>?	Visual modeで選択中の(複数)文字のヘルプ表を表示します。

漢字テーブルファイル表示(Normal Mode)		*tcvime-normal-kanjitable*
-------------------------------------
<Leader>t	漢字テーブルファイルを表示します。
		漢字テーブルファイルバッファで、入力したい文字の上にカーソルを
		移動して<CR>キーを押すと、元のバッファにその文字がコピーされま
		す。漢字テーブルファイルバッファは通常の方法(:q等)以外にqキー
		でも閉じます。

==============================================================================
3. オプション					*tcvime-option*

'tcvime_keyboard'				*'tcvime_keyboard'*
  文字ヘルプ表用のキーボード配列を表す文字列。
  キーの後にスペース、を2回ずつ記述します。
  例:
	let tcvime_keyboard = "1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 0 0 \<CR>q q w w e e r r t t y y u u i i o o p p \<CR>a a s s d d f f g g h h j j k k l l ; ; \<CR>z z x x c c v v b b n n m m , , . . / / "

'tcvime_keymap_for_help'			*'tcvime_keymap_for_help'*
  文字ヘルプ表示に使うkeymap。現在のバッファで&keymapが未設定の場合に使用。
  設定例:
	let tcvime_keymap_for_help = 'tutcode'

TcvimeCustomKeymap()                            *TcvimeCustomKeymap()*
  lmapのカスタマイズ用の関数。tcvime#SetKeymap()からコールバックされる。
  設定例は|tcvime-setting|参照。

'mapleader'
  キーマッピングのプレフィックス。|mapleader|を参照。省略値: CTRL-K
  CTRL-Kを指定する場合の例:
	let mapleader = "\<C-K>"

'plugin_tcvime_disable'
  このプラグインを読み込みたくない場合に次のように設定します。
	let plugin_tcvime_disable = 1

キー設定オプション(Insert Mode)
-------------------------------

'<Plug>TcvimeIStart'				*'<Plug>TcvimeIStart'*
   交ぜ書き変換: 読みの開始位置の印を付けるキー。省略値: <Leader>q
   例(aljを指定する場合):
     lmap <silent> alj <Plug>TcvimeIStart

'<Plug>TcvimeIConvOrStart'			*'<Plug>TcvimeIConvOrStart'*
   交ぜ書き変換: 変換実行キー。
   読みの開始位置の印が付けられていれば、
   開始位置と現在位置の間の文字列を、交ぜ書き変換の読みとして変換を実行。
   印が付けられていなければ、現状位置を読みの開始位置として印を付ける。
   省略値: <Leader><Space>
   例(al<Space>を指定する場合):
     lmap <silent> al<Space> <Plug>TcvimeIConvOrStart

'<Plug>TcvimeIConvOrSpace'			*'<Plug>TcvimeIConvOrSpace'*
   交ぜ書き変換: 変換実行キー。
   読みの開始位置の印が付けられていれば、
   開始位置と現在位置の間の文字列を、交ぜ書き変換の読みとして変換を実行。
   印が付けられていなければ、' 'を挿入。
   省略値: (無し: 未割当て)
   例(<Space>を指定する場合):
     imap <silent> <Space> <Plug>TcvimeIConvOrSpace
   Note: lmapにすると、lmap有効時にfやtやrの後の<Space>が使用不可(<C-R>=なので)

'<Plug>TcvimeIKatuyo'				*'<Plug>TcvimeIKatuyo'*
   交ぜ書き変換: 活用する語の変換実行キー。省略値: <Leader>o
   例(aloを指定する場合):
     lmap <silent> alo <Plug>TcvimeIKatuyo

'<Plug>TcvimeIBushu'				*'<Plug>TcvimeIBushu'*
   部首合成変換: 直前の2文字の部首合成変換実行キー。省略値: <Leader>b
   例(alaを指定する場合):
     lmap <silent> ala <Plug>TcvimeIBushu

キー設定オプション(Normal Mode)
-------------------------------

'<Plug>TcvimeNConvert'				*'<Plug>TcvimeNConvert'*
   交ぜ書き変換: カーソル位置以前の[count]文字の変換を行うキー。
   省略値: <Leader><Space>
   <Leader><Space>を指定する場合の例:
     nmap <silent> <Leader><Space> <Plug>TcvimeNConvert

'<Plug>TcvimeNOpConvert'			*'<Plug>TcvimeNOpConvert'*
   交ぜ書き変換: このキーを押した後の{motion}で指定される文字列を変換。
   注意: キーを押した際に|'operatorfunc'|を上書きします。
   省略値: (無し: 未割当て)
   <Leader>nを指定する場合の例:
     nmap <silent> <Leader>n <Plug>TcvimeNOpConvert

'<Plug>TcvimeNKatuyo'				*'<Plug>TcvimeNKatuyo'*
   交ぜ書き変換: [count]文字の活用する語の変換を行うキー。
   省略値: <Leader>o

'<Plug>TcvimeNOpKatuyo'				*'<Plug>TcvimeNOpKatuyo'*
   交ぜ書き変換: このキーを押した後の{motion}で指定される文字列を
   活用する語として変換。
   注意: キーを押した際に|'operatorfunc'|を上書きします。
   省略値: (無し: 未割当て)

'<Plug>TcvimeNBushu'				*'<Plug>TcvimeNBushu'*
   部首合成変換: カーソル位置以前の2文字の部首合成変換を行うキー。
   省略値: <Leader>b

'<Plug>TcvimeNKatakana'				*'<Plug>TcvimeNKatakana'*
   カタカナ変換: カーソル位置以前の[count]文字のカタカナへの変換を行うキー。
   省略値: (無し: 未割当て)

'<Plug>TcvimeNKataHira'				*'<Plug>TcvimeNKataHira'*
   カタカナ変換: カーソル位置以前でひらがなや・ーが続く間カタカナに変換。
   [count]で指定した文字数はひらがなとして残す。
   省略値: (無し: 未割当て)

'<Plug>TcvimeNOpKatakana'			*'<Plug>TcvimeNOpKatakana'*
   カタカナ変換: このキーを押した後の{motion}で指定される文字列をカタカナ変換。
   注意: キーを押した際に|'operatorfunc'|を上書きします。
   省略値: (無し: 未割当て)

'<Plug>TcvimeNHelp'				*'<Plug>TcvimeNHelp'*
   打鍵ヘルプ表示: カーソル位置の文字のヘルプ表を表示するキー。
   省略値: <Leader>?

'<Plug>TcvimeNKanjiTable'			*'<Plug>TcvimeNKanjiTable'*
   漢字テーブルファイル表示を行うキー。省略値: <Leader>t

キー設定オプション(Visual Mode)
-------------------------------

'<Plug>TcvimeVHelp'				*'<Plug>TcvimeVHelp'*
   打鍵ヘルプ表示: 選択中の(複数)文字のヘルプ表を表示するキー。
   省略値: <Leader>?
   <Leader>? を指定する場合の例:
     vmap <silent> <Leader>? <Plug>TcvimeVHelp

'<Plug>TcvimeVConvert'				*'<Plug>TcvimeVConvert'*
   交ぜ書き変換: 選択中の文字列の変換を行うキー。
   省略値: <Leader><Space>

'<Plug>TcvimeVKatuyo'				*'<Plug>TcvimeVKatuyo'*
   交ぜ書き変換: 選択中の文字列を活用する語として変換を行うキー。
   省略値: <Leader>o

'<Plug>TcvimeVKatakana'				*'<Plug>TcvimeVKatakana'*
   カタカナ変換: 選択中の文字列をカタカナに変換するキー。
   省略値: (無し: 未割当て)

==============================================================================
4. コマンド					*tcvime-command*

:TcvimeOn					*:TcvimeOn*
  キーマッピングを有効化する

:TcvimeOff					*:TcvimeOff*
  キーマッピングを無効化する

:TcvimeHelp {str}				*:TcvimeHelp*
  指定した文字列内の各文字のヘルプ表を表示する

:TcvimeHelpBushu {str}				*:TcvimeHelpBushu*
  指定した文字列内の各文字を含む行を部首合成変換辞書から検索して表示する

:TcvimeSetKeymap {keymap}			*:TcvimeSetKeymap*
  &keymapに{keymap}をsetする

:TcvimeKanjiTable				*:TcvimeKanjiTable*
  漢字テーブルファイルを表示して、漢字を選んで入力

:TcvimeCloseHelp				*:TcvimeCloseHelp*
  ヘルプ用バッファを閉じる

:TcvimeEditMazegaki				*:TcvimeEditMazegaki*
  交ぜ書き変換辞書への単語登録用コマンド。
  交ぜ書き変換辞書を編集用に開いて直前に変換した読みを検索する。
  読みが見つからない場合は、新たな行を追加して、
  読みと候補文字列(読みと同じ)を挿入する。

==============================================================================
5. 設定例					*tcvime-setting*

~/.vimrcでの設定例です。
<C-J>でtutcodeを有効にし、<C-L>でtutcodeを無効にする設定の例です。
(<C-^>でのトグル操作における、現在の状態を意識する負担を無くしたい場合用)

if has('keymap')
  set iminsert=0 imsearch=0
  " 切替時にインデントが解除されるのを回避するため、1<C-H>
  imap <C-J> 1<C-H><C-O>:call <SID>EnableKeymap('tutcode')<CR>
  imap <silent> <C-L> 1<C-H><C-O>:call <SID>DisableKeymap()<CR>
  imap <silent> <ESC> <ESC>:set imsearch=0<CR>
  nmap <silent> <C-K>k <Plug>TcvimeNKatakana
  vmap <silent> <C-K>k <Plug>TcvimeVKatakana
endif

function! s:EnableKeymap(keymapname)
  call tcvime#SetKeymap(a:keymapname)
  " <Space>で前置型交ぜ書き変換を開始するか、読みが無ければ' 'を挿入。
  " (lmapにすると、lmap有効時にfやtやrの後の<Space>が使用不可。(<C-R>=なので))
  imap <silent> <Space> <Plug>TcvimeIConvOrSpace
endfunction

function! s:DisableKeymap()
  let &iminsert = 0
  silent! iunmap <Space>
  TcvimeCloseHelp
endfunction

" lmapのカスタマイズを行う関数。
" tcvime#SetKeymap()からコールバックされる。
function! TcvimeCustomKeymap()
  " (TUT-Code用の例)
  " alaで後置型部首合成変換
  lmap <silent> ala <Plug>TcvimeIBushu
  " aljで前置型交ぜ書き変換の読み入力開始
  lmap <silent> alj <Plug>TcvimeIStart
  " al<Space>で前置型交ぜ書き変換
  lmap <silent> al<Space> <Plug>TcvimeIConvOrStart
  " aloで前置型交ぜ書き変換(活用する語として変換)
  lmap <silent> alo <Plug>TcvimeIKatuyo
  " alzで直前のカタカナ変換・交ぜ書き変換・部首合成変換の取り消し
  lmap <silent> alz <C-R>=tcvime#InputConvertUndo()<CR>
  " al;で直前のカタカナ変換を縮める
  lmap <silent> al; <C-R>=tcvime#InputConvertKatakanaShrink()<CR>
  " 後置型カタカナ変換
  lmap <silent> all <C-R>=tcvime#InputConvertKatakana(0)<CR> " ひらがなが続く間
  lmap <silent> al1 <C-R>=tcvime#InputConvertKatakana(1)<CR> " 1文字
  lmap <silent> al2 <C-R>=tcvime#InputConvertKatakana(2)<CR> " 2文字
  lmap <silent> al3 <C-R>=tcvime#InputConvertKatakana(3)<CR>
  lmap <silent> al4 <C-R>=tcvime#InputConvertKatakana(4)<CR>
  lmap <silent> al5 <C-R>=tcvime#InputConvertKatakana(5)<CR>
  lmap <silent> al6 <C-R>=tcvime#InputConvertKatakana(6)<CR>
  lmap <silent> al7 <C-R>=tcvime#InputConvertKatakana(7)<CR>
  lmap <silent> al8 <C-R>=tcvime#InputConvertKatakana(8)<CR>
  lmap <silent> al9 <C-R>=tcvime#InputConvertKatakana(9)<CR>
  " 後置型カタカナ変換: 指定文字数のひらがなを残してカタカナ変換
  lmap <silent> alq <C-R>=tcvime#InputConvertKatakana(-1)<CR>
  lmap <silent> alw <C-R>=tcvime#InputConvertKatakana(-2)<CR>
  lmap <silent> ale <C-R>=tcvime#InputConvertKatakana(-3)<CR>
  lmap <silent> alr <C-R>=tcvime#InputConvertKatakana(-4)<CR>
  lmap <silent> alt <C-R>=tcvime#InputConvertKatakana(-5)<CR>
  lmap <silent> aly <C-R>=tcvime#InputConvertKatakana(-6)<CR>
  " tc2同様の後置型交ぜ書き変換を行うための設定:
  " " 活用しない語
  " lmap <silent> 18 <C-R>=tcvime#InputPostConvert(1, 0)<CR>
  " lmap <silent> 28 <C-R>=tcvime#InputPostConvert(2, 0)<CR>
  " lmap <silent> 38 <C-R>=tcvime#InputPostConvert(3, 0)<CR>
  " lmap <silent> 48 <C-R>=tcvime#InputPostConvert(4, 0)<CR>
  " " 活用する語(ただしtc2と違って、読みの文字数には活用語尾は含まない)
  " lmap <silent> 29 <C-R>=tcvime#InputPostConvert(2, 1)<CR>
  " lmap <silent> 39 <C-R>=tcvime#InputPostConvert(3, 1)<CR>
  " lmap <silent> 49 <C-R>=tcvime#InputPostConvert(4, 1)<CR>
  " lmap <silent> 59 <C-R>=tcvime#InputPostConvert(5, 1)<CR>
endfunction

==============================================================================
6. 問題点					*tcvime-problem*

- Insert Modeの交ぜ書き変換の際、ポップアップメニューが無効で表示できない場合、
  自動ヘルプの表示はできません。

- |'backspace'|オプションにstartが入っていない場合、Insertモードで部首合成
  変換等を行ったときに、元の文字が消えないで残ってしまうことがあります。
  <BS>で元の文字を消しているためです。

==============================================================================
